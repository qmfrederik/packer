---
# playbook.yml
- name: 'Provision Image'
  hosts: default
  vars:
    epgw_version: 25.1.3-0187
    epgw_url_arm64: https://qmcdn.blob.core.windows.net/epgw/epgw.{{ epgw_version }}.linux-arm64.tar.gz
    epgw_hash_arm64: sha1:d873847e23eb1fcce860021dc34aa6cb9cfe4ca3

    epgw_url_x64: https://qmcdn.blob.core.windows.net/epgw/epgw.{{ epgw_version }}.linux-x64.tar.gz
    epgw_hash_x64: sha1:d4f37009469795ade6d0b63d49f865e6037f50bf


    keycloak_url: https://github.com/keycloak/keycloak/releases/download/26.0.7/keycloak-26.0.7.tar.gz
    keycloak_hash: sha1:82b65b4741378a9fda1fdd3556c7b3a58c8a4ebd

    quarkus_systemd_notify_url: https://repo1.maven.org/maven2/io/quarkiverse/systemd/notify/quarkus-systemd-notify/1.0.2/quarkus-systemd-notify-1.0.2.jar
    quarkus_systemd_notify_hash: sha1:3358e05408c5fe9983ed45ed443347316852aebc

    quarkus_systemd_notify_deployment_url: https://repo1.maven.org/maven2/io/quarkiverse/systemd/notify/quarkus-systemd-notify-deployment/1.0.2/quarkus-systemd-notify-deployment-1.0.2.jar
    quarkus_systemd_notify_deployment_hash: sha1:fddd14a0d21db557c18bd9176f3da6c788a52c26

    keycloak_bootstrap_admin_username: admin
    keycloak_bootstrap_admin_password: admin

    keycloak_eggplant_realm: eggplant
    keycloak_epgw_client_id: epgw
    keycloak_epgw_client_secret: a9a49b2f-6bd6-4d2c-b443-241e8448abbb

    service_name: eggcloud
  become: true

  tasks:
    - name: "Install dependencies ({{ ansible_distribution }})"
      include_tasks: "playbook.{{ ansible_distribution | lower }}.yml"

    - name: Customize login screen
      template:
        src: issue.j2
        dest: /etc/issue

    ###########################################################################
    # Create self-signed certificate                                          #
    ###########################################################################
    - name: Create epgw_cert group
      ansible.builtin.group:
        name: epgw_cert
        state: present

    - name: Create Eggplant Gateway settings directory
      ansible.builtin.file:
        path: /etc/epgw
        state: directory

    - name: Create private key for self-signed certificate
      community.crypto.openssl_privatekey:
        path: /etc/epgw/epgw.key
        group: epgw_cert
        mode: u=rw,g=r

    - name: Create certificate signing request (CSR) for self-signed certificate for {{ service_name }}
      community.crypto.openssl_csr_pipe:
        privatekey_path: /etc/epgw/epgw.key
        common_name: "{{ service_name }}"
      register: csr

    - name: Create self-signed certificate for {{ service_name }} from CSR
      community.crypto.x509_certificate:
        path: /etc/epgw/epgw.pem
        csr_content: "{{ csr.csr }}"
        privatekey_path: /etc/epgw/epgw.key
        provider: selfsigned

    - name: Trust the self-signed certificate
      ansible.builtin.file:
        src: /etc/epgw/epgw.pem
        dest: /usr/local/share/ca-certificates/epgw.crt
        state: link

    - name: Update CA certificates
      shell: /usr/sbin/update-ca-certificates 

    ###########################################################################
    # Install Eggplant Gateway                                                #
    ###########################################################################

    - name: Determine if the Eggplant Gateway is installed
      ansible.builtin.stat:
        path: /opt/epgw/epgw
      register: epgw

    - name: Download Eggplant Gateway (arm64)
      ansible.builtin.get_url:
        url: '{{ epgw_url_arm64 }}'
        dest: '/tmp/epgw.tar.gz'
        checksum: '{{ epgw_hash_arm64 }}'
        mode: '644'
      when: ansible_architecture == "aarch64" and not epgw.stat.exists

    - name: Download Eggplant Gateway (x64)
      ansible.builtin.get_url:
        url: '{{ epgw_url_x64 }}'
        dest: '/tmp/epgw.tar.gz'
        checksum: '{{ epgw_hash_x64 }}'
        mode: '644'
      when: ansible_architecture == "x86_64" and not epgw.stat.exists

    - name: Create Eggplant Gateway directory
      ansible.builtin.file:
        path: /opt/epgw
        state: directory

    - name: Install Eggplant Gateway into /opt/epgw
      ansible.builtin.unarchive:
        remote_src: true
        src: /tmp/epgw.tar.gz
        dest: /opt/epgw
      when: not epgw.stat.exists
      
    - name: Create /usr/local/bin/epgw symlink
      ansible.builtin.file:
        src: /opt/epgw/epgw
        dest: /usr/local/bin/epgw
        state: link

    - name: Create epgw user
      ansible.builtin.user:
        name: epgw

    - name: Adding epgw user to group epgw_cert
      user:
        name: epgw
        groups: epgw_cert
        append: yes

    - name: Creates /var/lib/epgw directory
      ansible.builtin.file:
        path: /var/lib/epgw
        state: directory
        owner: epgw
        mode: '0755'

    - name: Create Tutorial SUT
      ansible.builtin.copy:
        content: |
          {
            "ConnectionName": "tutorial",
            "GatewayName": "tutorial"
          }
        dest: /var/lib/epgw/epgw.tutorial.json
        owner: epgw

    - name: Create epgw systemd service file
      template:
        src: epgw.service.j2
        dest: /lib/systemd/system/epgw.service

    - name: Enable the Eggplant Gateway service
      ansible.builtin.systemd_service:
        name: epgw
        enabled: true

    - name: Start the Eggplant Gateway service
      ansible.builtin.systemd_service:
        name: epgw
        state: started
        daemon_reload: true
      when: ansible_connection != 'chroot'

    ###########################################################################
    # Install Keycloak                                                        #
    ###########################################################################

    - name: Determine if the Keycloak is installed
      ansible.builtin.stat:
        path: /opt/keycloak/bin/kc.sh
      register: keycloak

    - name: Download Keycloak
      ansible.builtin.get_url:
        url: '{{ keycloak_url }}'
        dest: '/tmp/keycloak.tar.gz'
        checksum: '{{ keycloak_hash }}'
        mode: '644'
      when: not keycloak.stat.exists

    - name: Create keycloak user
      ansible.builtin.user:
        name: keycloak

    - name: Adding keycloak user to group epgw_cert
      user:
        name: keycloak
        groups: epgw_cert
        append: yes

    - name: Create /opt/keycloak/ directory
      ansible.builtin.file:
        path: /opt/keycloak/
        state: directory
        owner: keycloak
        mode: '0755'

    - name: Install Keycloak into /opt/keycloak
      ansible.builtin.unarchive:
        remote_src: true
        src: /tmp/keycloak.tar.gz
        dest: /opt/keycloak
        owner: keycloak
        # Remove the top-level directory
        extra_opts: ['--strip-components=1', '--show-stored-names']
      when: not keycloak.stat.exists

    - name: Download quarkus-systemd-notify-deployment
      ansible.builtin.get_url:
        url: '{{ quarkus_systemd_notify_url }}'
        dest: '/opt/keycloak/providers/'
        checksum: '{{ quarkus_systemd_notify_hash }}'
        mode: '644'

    - name: Download quarkus-systemd-notify-deployment
      ansible.builtin.get_url:
        url: '{{ quarkus_systemd_notify_deployment_url }}'
        dest: '/opt/keycloak/providers/'
        checksum: '{{ quarkus_systemd_notify_deployment_hash }}'
        mode: '644'

    - name: Create Keycloak systemd service file
      template:
        src: keycloak.service.j2
        dest: /lib/systemd/system/keycloak.service

    - name: Enable the Keycloak service
      ansible.builtin.systemd_service:
        name: keycloak
        enabled: true

    - name: Start the Keycloak service
      ansible.builtin.systemd_service:
        name: keycloak
        state: started
        daemon_reload: true
      when: ansible_connection != 'chroot'

    # SystemD is not running when using a chroot connection, in which case
    # we manually start keycloak as a background task
    - name: Start Keycloak (async)
      ansible.builtin.shell: sudo -E -u keycloak /opt/keycloak/bin/kc.sh start-dev
      environment:
        KC_BOOTSTRAP_ADMIN_USERNAME: "{{ keycloak_bootstrap_admin_username }}"
        KC_BOOTSTRAP_ADMIN_PASSWORD: "{{ keycloak_bootstrap_admin_password }}"
      async: 3600
      poll: 0
      when: ansible_connection == 'chroot'

    - name: Wait Keycloak to start, by checking for port 8080
      ansible.builtin.wait_for:
        port: 8080
        timeout: 60

    ###########################################################################
    # Configure Keycloak                                                      #
    ###########################################################################

    - name: Create the Eggplant realm
      community.general.keycloak_realm:
        auth_client_id: admin-cli
        auth_keycloak_url: http://localhost:8080/
        auth_realm: master
        auth_username: "{{ keycloak_bootstrap_admin_username }}"
        auth_password: "{{ keycloak_bootstrap_admin_password }}"
        id: "{{ keycloak_eggplant_realm }}"
        realm: "{{ keycloak_eggplant_realm }}"
        enabled: true
        state: present

    - name: Create the epgw client
      community.general.keycloak_client:
        auth_keycloak_url: http://localhost:8080/
        auth_realm: master
        auth_username: "{{ keycloak_bootstrap_admin_username }}"
        auth_password: "{{ keycloak_bootstrap_admin_password }}"
        realm: "{{ keycloak_eggplant_realm }}"
        id: "{{ keycloak_epgw_client_id }}"
        client_id: "{{ keycloak_epgw_client_id }}"
        # Direct access grants are used by Eggcloud, to authenticate a
        # user using its username and password
        direct_access_grants_enabled: true
        # Implicit flow is used by the PCS UI
        implicit_flow_enabled: true
        redirect_uris:
          - https://{{ service_name  }}:5001/signin-oidc
          - http://{{ service_name  }}:5000/signin-oidc
        secret: "{{ keycloak_epgw_client_secret }}"
        state: present

    - name: Create an Eggplant user
      community.general.keycloak_user:
        auth_keycloak_url: http://localhost:8080/
        auth_realm: master
        auth_username: "{{ keycloak_bootstrap_admin_username }}"
        auth_password: "{{ keycloak_bootstrap_admin_password }}"
        realm: "{{ keycloak_eggplant_realm }}"
        username: eggy
        first_name: Eggy
        last_name: Aubergine
        email: eggy.aubergine@eggplant.io
        enabled: true
        emailVerified: false
        credentials:
            - type: password
              value: aubergine
              temporary: false
        state: present

    - name: Force admin user to change password on next login
      community.general.keycloak_user:
        auth_keycloak_url: http://localhost:8080/
        auth_realm: master
        auth_username: "{{ keycloak_bootstrap_admin_username }}"
        auth_password: "{{ keycloak_bootstrap_admin_password }}"
        realm: master
        username: "{{ keycloak_bootstrap_admin_username }}"
        credentials:
            - type: password
              value: "{{ keycloak_bootstrap_admin_password }}"
              temporary: true

    - name: Get running Keycloak processes
      shell: "ps -ef | grep -v grep | grep -w java | awk '{print $2}'"
      register: keycloak_processes
      when: ansible_connection == 'chroot'

    - name: Kill Keycloak processes
      shell: "kill {{ item }}"
      with_items: "{{ keycloak_processes.stdout_lines }}"
      when: ansible_connection == 'chroot'

    - wait_for:
        path: "/proc/{{ item }}/status"
        state: absent
      with_items: "{{ keycloak_processes.stdout_lines }}"
      ignore_errors: yes
      register: killed_processes
      when: ansible_connection == 'chroot'

    - name: Force kill stuck processes
      shell: "kill -9 {{ item }}"
      with_items: "{{ killed_processes.results | select('failed') | map(attribute='item') | list }}"
      when: ansible_connection == 'chroot'
